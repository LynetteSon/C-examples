// Doubly Linked List ;

#include<stdio.h>
#include<stdlib.h>

typedef struct listNode{
    int Data;
    struct listNode* Next;
    struct listNode* Prev;
}Node;

Node* createNode(int data){
    
    Node* newNode = (Node*)malloc(sizeof(Node));
    
    newNode->Data = data;
    newNode->Next = NULL;
    newNode->Prev = NULL;

    return newNode;
}

void deleteNode(Node* Node){
    free(Node);
}

Node* getNodeAt(Node* head, int index){
    Node* horse = head;
    int count = 0;
    
    while(horse != NULL){
        if (count++ == index){
            return horse;
        }
        horse = horse ->Next;
    }
    return NULL;
}

int countNode(Node* head){
    
    int count=0;
    Node* horse = head;
    
    while(horse !=NULL){
        horse = horse->Next;
        count++;
    }
    return count;
}

void addNode(Node** head, Node* newNode){
    if(*head ==NULL){
        *head = newNode;
    }
    else{
        
        Node* horse = (*head);
        
        while(horse->Next != NULL){
            horse = horse ->Next;
        }
        horse->Next = newNode;
        newNode->Prev = horse;
    }
}

void insertNode(Node* current, Node* newNode){
    
    //head?
    if(current->Prev == NULL && current->Next == NULL){
        current->Next = newNode;
        newNode->Prev = current;
    }
    //tail?
    if(current->Next == NULL){
        current->Next = newNode;
        newNode->Prev = current;
    }
    else{
        current->Next->Prev = newNode;
        newNode->Prev = current;
        newNode->Next = current->Next;
        current->Next = newNode;
        }
    }
/*    
void removeNode(Node** head, Node* remove){
    //head
    if(*head == remove){
        *head = remove->Next;
    }
    if(*head->Next != NULL){
        remove->Next->Prev = remove->Prev;
    }
    if(remove->Prev != NULL){
        remove->Prev->Next = remove->Next;
    }
    
    deleteNode(remove);
} */

main(){
    
    int i = 0;
    int count = 0;
    
    Node* List = NULL;
    Node* newNode = NULL;
    Node* curr = NULL;
    
    for(i=0; i<5; i++){
        newNode = createNode(i);
        addNode = (&List, newNode);
    }
    
    count = countNode(List);
    for (i=0;i<count;i++){
        curr = getNodeAt(List, i);
        printf("List[%d] = &d \n", i, curr->Data);
    }
    
    printf("--------------5 Nodes created -------------\n");
    
    return 0;
}
    
